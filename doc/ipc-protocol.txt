== Core protocol

Notbit listens on an abstract Unix-domain socket to implement IPC.
This is used to send messages and to check the status of the daemon.
The protocol is inspired by the Bitmessage protocol but it doesn't
need to worry about proof-of-work or timing issues because it can
assume it can trust all of the connections as they are from the same
machine. Notbit checks the credentials of any connections to the
socket and only accepts the same user as that of the notbit daemon or
root.

The socket will be located in $XDG_RUNTIME_DIR/notbit/notbit-ipc. The
socket is abstract which means that there needs to be a zero byte
prefixed to the address to get it to be treated as such. Abstract Unix
domain sockets are a Linux-specific feature which makes it so the
socket doesn't occupy a name in the filesystem. The protocol exchanges
binary commands like the Bitmessage protocol but with a slightly
different header. All integers are in big-endian. The command header
looks like this:

┌──┬──────────┬────────────┬────────────────────────────────────────────────┐
│12│command   │char[12]    │ASCII string identifying the packet content,    │
│  │          │            │NULL padded (non-NULL padding results in packet │
│  │          │            │rejected)                                       │
├──┼──────────┼────────────┼────────────────────────────────────────────────┤
│4 │request ID│uint32_t    │An integer representing the request. This will  │
│  │          │            │be sent back in the reply so the client can tell│
│  │          │            │which command it pertains to.                   │
├──┼──────────┼────────────┼────────────────────────────────────────────────┤
│4 │length    │uint32_t    │Length of the payload in bytes                  │
├──┼──────────┼────────────┼────────────────────────────────────────────────┤
│? │payload   │uchar[]     │The remainder of the command                    │
└──┴──────────┴────────────┴────────────────────────────────────────────────┘

The request ID is an arbitrary integer selected by the client.
Typically the client would just start at 0 and increment this number
every time it sends a request. Every request will receive a single
‘response’ command from the server which will have same the request ID
as the one it pertains to. The responses do not necessarily arrive in
the same order as the requests.

The responses will be contained in a ‘response’ command with the
following payload:

┌──┬──────────┬────────────┬────────────────────────────────────────────────┐
│4 │status    │uint32_t    │A status code representing an error number or 0 │
│  │          │            │If the request suceeded                         │
├──┼──────────┼────────────┼────────────────────────────────────────────────┤
│? │data      │uchar[]     │Data for the response. If the status is non-zero│
│  │          │            │then this will be some text describing the error│
└──┴──────────┴────────────┴────────────────────────────────────────────────┘

== ‘email’ command

The email command is used to add an outgoing message to the network
using an RFC822-format email. This is the same format that you would
use to send a regular email using a command like sendmail. Thus the
email command is expected to be used to make a drop-in replacement for
sendmail so that Notbit can be used with regular mail clients.

The email command has no payload. Instead the contents of the message
are passed in a file descriptor which must be specified using file
descriptor passing. This is a feature of Unix domain sockets (see man
unix(7)). notbit-sendmail just directly passes the file descriptor for
its standard in over the protocol so that it doesn't need to
redundantly copy the email before passing it on.

All of the addresses in the email must be of the form
‘BM-foo@bitmessage’ where BM-foo is a valid Bitmessage address. If
notbit can't understand any of the addresses then an error response
will be reported.

The from address must refer to the address for a private key that is
known by Notbit. An error response will be returned otherwise. The
destination addresses are specified in the To, Cc and Bcc headers.
These can be any valid addresses and Notbit will query the network for
the keys if it doesn't yet have them. There can be multiple
destination addresses and this will result in multiple copies of the
message being sent. The distinction between To, Cc and Bcc is lost
once the email becomes a Bitmessage as only one of the recipients is
encoded in each message so the recipient can't tell who else the
message was sent to anyway.

The message must be text/plain. The content-type header will be
checked to verify this and an error response will be reported if it is
anything else. This means that HTML and emails with attachments will
be rejected.

Currently the email must be in either UTF-8 or us-ascii. The charset
attribute in the content-type will be checked to verify this. It is
expected that a later version will accept other character sets and
convert them to UTF-8 on the fly. The content transfer encoding must
be either 7bit, 8bit, base64 or quoted-printable.

If a subject header is present then the message will be sent with the
‘SIMPLE’ encoding rather than ‘TRIVIAL’ and the subject will be
included.

All other headers are stripped from the message so that the final
message appears as a normal message and can be read by PyBitmessage or
other clients conforming to the protocol.

The response is sent immediately after the email is parsed and it does
not wait until the message hits the network and is actually sent.

== ‘keygen’ command

The keygen command generates a new address. The payload of the request
is like this:

┌──┬──────────┬────────────┬────────────────────────────────────────────────┐
│? │version   │var_int     │The version number to use for the public key or │
│  │          │            │zero to use the latest version.                 │
├──┼──────────┼────────────┼────────────────────────────────────────────────┤
│? │stream    │var_int     │The stream number that the address should be on.│
│  │          │            │This must be 1.                                 │
├──┼──────────┼────────────┼────────────────────────────────────────────────┤
│? │nonce     │var_int     │The average number of nonce trials per byte     │
│  │trials per│            │required to accept messages on this key, or 0   │
│  │byte      │            │to use the default.                             │
├──┼──────────┼────────────┼────────────────────────────────────────────────┤
│? │payload   │var_int     │The number of bytes to add on to the length     │
│  │length    │            │for the POW-difficulty calculation, or 0 to use │
│  │extra     │            │the default.                                    │
├──┼──────────┼────────────┼────────────────────────────────────────────────┤
│1 │zeroes    │uchar       │Minimum number of leading zeroes to have in the │
│  │          │            │address. Only 0, 1 or 2 will be accepted. A     │
│  │          │            │higher number will make the address shorter.    │
├──┼──────────┼────────────┼────────────────────────────────────────────────┤
│? │label     │var_str     │A name for the key                              │
└──┴──────────┴────────────┴────────────────────────────────────────────────┘

If the status code in the response is zero then it will have the
following data:

┌──┬──────────┬────────────┬────────────────────────────────────────────────┐
│? │version   │var_int     │The version number of the generated key         │
├──┼──────────┼────────────┼────────────────────────────────────────────────┤
│? │stream    │var_int     │The stream number that the address is be on     │
├──┼──────────┼────────────┼────────────────────────────────────────────────┤
│20│ripe      │uchar[]     │The RIPE of the public keys combined with the   │
│  │          │            │version number and stream. See the Bitmessage   │
│  │          │            │protocol description to see how this is         │
│  │          │            │calculated.                                     │
├──┼──────────┼────────────┼────────────────────────────────────────────────┤
│? │address   │var_str     │The human-readable address as ASCII characters  │
└──┴──────────┴────────────┴────────────────────────────────────────────────┘
